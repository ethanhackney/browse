#include "elem/include/dump.h"
#include "elem/include/factory.h"
#include "html.h"
#include <iostream>
#include <exception>
#include <unordered_map>
#include <unordered_set>
#include <memory>

extern "C" {
extern char *yytext;
extern int yyleng;
int yylex(void);
}

static const std::unordered_map<int,std::unordered_set<int>> tagattrs {
};

static const std::unordered_map<int,int> tagenders {
        { HTML_TT_TAG_A_OPEN, HTML_TT_TAG_A_CLOSE },
        { HTML_TT_TAG_ABBR_OPEN, HTML_TT_TAG_ABBR_CLOSE },
        { HTML_TT_TAG_ACRONYM_OPEN, HTML_TT_TAG_ACRONYM_CLOSE },
        { HTML_TT_TAG_ADDRESS_OPEN, HTML_TT_TAG_ADDRESS_CLOSE },
        { HTML_TT_TAG_APPLET_OPEN, HTML_TT_TAG_APPLET_CLOSE },
        { HTML_TT_TAG_AREA_OPEN, HTML_TT_TAG_AREA_CLOSE },
        { HTML_TT_TAG_ASIDE_OPEN, HTML_TT_TAG_ASIDE_CLOSE },
        { HTML_TT_TAG_AUDIO_OPEN, HTML_TT_TAG_AUDIO_CLOSE },
        { HTML_TT_TAG_B_OPEN, HTML_TT_TAG_B_CLOSE },
        { HTML_TT_TAG_BASE_OPEN, HTML_TT_TAG_BASE_CLOSE },
        { HTML_TT_TAG_BASEFONT_OPEN, HTML_TT_TAG_BASEFONT_CLOSE },
        { HTML_TT_TAG_BDI_OPEN, HTML_TT_TAG_BDI_CLOSE },
        { HTML_TT_TAG_BDO_OPEN, HTML_TT_TAG_BDO_CLOSE },
        { HTML_TT_TAG_BIG_OPEN, HTML_TT_TAG_BIG_CLOSE },
        { HTML_TT_TAG_BLOCKQUOTE_OPEN, HTML_TT_TAG_BLOCKQUOTE_CLOSE },
        { HTML_TT_TAG_BODY_OPEN, HTML_TT_TAG_BODY_CLOSE },
        { HTML_TT_TAG_BR_OPEN, HTML_TT_TAG_BR_CLOSE },
        { HTML_TT_TAG_BUTTON_OPEN, HTML_TT_TAG_BUTTON_CLOSE },
        { HTML_TT_TAG_CANVAS_OPEN, HTML_TT_TAG_CANVAS_CLOSE },
        { HTML_TT_TAG_CAPTION_OPEN, HTML_TT_TAG_CAPTION_CLOSE },
        { HTML_TT_TAG_CENTER_OPEN, HTML_TT_TAG_CENTER_CLOSE },
        { HTML_TT_TAG_CITE_OPEN, HTML_TT_TAG_CITE_CLOSE },
        { HTML_TT_TAG_CODE_OPEN, HTML_TT_TAG_CODE_CLOSE },
        { HTML_TT_TAG_COL_OPEN, HTML_TT_TAG_COL_CLOSE },
        { HTML_TT_TAG_COLGROUP_OPEN, HTML_TT_TAG_COLGROUP_CLOSE },
        { HTML_TT_TAG_DATA_OPEN, HTML_TT_TAG_DATA_CLOSE },
        { HTML_TT_TAG_DATALIST_OPEN, HTML_TT_TAG_DATALIST_CLOSE },
        { HTML_TT_TAG_DD_OPEN, HTML_TT_TAG_DD_CLOSE },
        { HTML_TT_TAG_DEL_OPEN, HTML_TT_TAG_DEL_CLOSE },
        { HTML_TT_TAG_DETAILS_OPEN, HTML_TT_TAG_DETAILS_CLOSE },
        { HTML_TT_TAG_DFN_OPEN, HTML_TT_TAG_DFN_CLOSE },
        { HTML_TT_TAG_DIALOG_OPEN, HTML_TT_TAG_DIALOG_CLOSE },
        { HTML_TT_TAG_DIR_OPEN, HTML_TT_TAG_DIR_CLOSE },
        { HTML_TT_TAG_DIV_OPEN, HTML_TT_TAG_DIV_CLOSE },
        { HTML_TT_TAG_DL_OPEN, HTML_TT_TAG_DL_CLOSE },
        { HTML_TT_TAG_DT_OPEN, HTML_TT_TAG_DT_CLOSE },
        { HTML_TT_TAG_EM_OPEN, HTML_TT_TAG_EM_CLOSE },
        { HTML_TT_TAG_EMBED_OPEN, HTML_TT_TAG_EMBED_CLOSE },
        { HTML_TT_TAG_FIELDSET_OPEN, HTML_TT_TAG_FIELDSET_CLOSE },
        { HTML_TT_TAG_FIGCAPTION_OPEN, HTML_TT_TAG_FIGCAPTION_CLOSE },
        { HTML_TT_TAG_FIGURE_OPEN, HTML_TT_TAG_FIGURE_CLOSE },
        { HTML_TT_TAG_FONT_OPEN, HTML_TT_TAG_FONT_CLOSE },
        { HTML_TT_TAG_FOOTER_OPEN, HTML_TT_TAG_FOOTER_CLOSE },
        { HTML_TT_TAG_FORM_OPEN, HTML_TT_TAG_FORM_CLOSE },
        { HTML_TT_TAG_FRAME_OPEN, HTML_TT_TAG_FRAME_CLOSE },
        { HTML_TT_TAG_FRAMESET_OPEN, HTML_TT_TAG_FRAMESET_CLOSE },
        { HTML_TT_TAG_H1_OPEN, HTML_TT_TAG_H1_CLOSE },
        { HTML_TT_TAG_H2_OPEN, HTML_TT_TAG_H2_CLOSE },
        { HTML_TT_TAG_H3_OPEN, HTML_TT_TAG_H3_CLOSE },
        { HTML_TT_TAG_H4_OPEN, HTML_TT_TAG_H4_CLOSE },
        { HTML_TT_TAG_H5_OPEN, HTML_TT_TAG_H5_CLOSE },
        { HTML_TT_TAG_H6_OPEN, HTML_TT_TAG_H6_CLOSE },
        { HTML_TT_TAG_HEAD_OPEN, HTML_TT_TAG_HEAD_CLOSE },
        { HTML_TT_TAG_HEADER_OPEN, HTML_TT_TAG_HEADER_CLOSE },
        { HTML_TT_TAG_HGROUP_OPEN, HTML_TT_TAG_HGROUP_CLOSE },
        { HTML_TT_TAG_HR_OPEN, HTML_TT_TAG_HR_CLOSE },
        { HTML_TT_TAG_HTML_OPEN, HTML_TT_TAG_HTML_CLOSE },
        { HTML_TT_TAG_I_OPEN, HTML_TT_TAG_I_CLOSE },
        { HTML_TT_TAG_IFRAME_OPEN, HTML_TT_TAG_IFRAME_CLOSE },
        { HTML_TT_TAG_IMG_OPEN, HTML_TT_TAG_IMG_CLOSE },
        { HTML_TT_TAG_INPUT_OPEN, HTML_TT_TAG_INPUT_CLOSE },
        { HTML_TT_TAG_INS_OPEN, HTML_TT_TAG_INS_CLOSE },
        { HTML_TT_TAG_KBD_OPEN, HTML_TT_TAG_KBD_CLOSE },
        { HTML_TT_TAG_LABEL_OPEN, HTML_TT_TAG_LABEL_CLOSE },
        { HTML_TT_TAG_LEGEND_OPEN, HTML_TT_TAG_LEGEND_CLOSE },
        { HTML_TT_TAG_LI_OPEN, HTML_TT_TAG_LI_CLOSE },
        { HTML_TT_TAG_LINK_OPEN, HTML_TT_TAG_LINK_CLOSE },
        { HTML_TT_TAG_MAIN_OPEN, HTML_TT_TAG_MAIN_CLOSE },
        { HTML_TT_TAG_MAP_OPEN, HTML_TT_TAG_MAP_CLOSE },
        { HTML_TT_TAG_MARK_OPEN, HTML_TT_TAG_MARK_CLOSE },
        { HTML_TT_TAG_MENU_OPEN, HTML_TT_TAG_MENU_CLOSE },
        { HTML_TT_TAG_META_OPEN, HTML_TT_TAG_META_CLOSE },
        { HTML_TT_TAG_METER_OPEN, HTML_TT_TAG_METER_CLOSE },
        { HTML_TT_TAG_NAV_OPEN, HTML_TT_TAG_NAV_CLOSE },
        { HTML_TT_TAG_NOFRAMES_OPEN, HTML_TT_TAG_NOFRAMES_CLOSE },
        { HTML_TT_TAG_NOSCRIPT_OPEN, HTML_TT_TAG_NOSCRIPT_CLOSE },
        { HTML_TT_TAG_OBJECT_OPEN, HTML_TT_TAG_OBJECT_CLOSE },
        { HTML_TT_TAG_OL_OPEN, HTML_TT_TAG_OL_CLOSE },
        { HTML_TT_TAG_OPTGROUP_OPEN, HTML_TT_TAG_OPTGROUP_CLOSE },
        { HTML_TT_TAG_OPTION_OPEN, HTML_TT_TAG_OPTION_CLOSE },
        { HTML_TT_TAG_OUTPUT_OPEN, HTML_TT_TAG_OUTPUT_CLOSE },
        { HTML_TT_TAG_P_OPEN, HTML_TT_TAG_P_CLOSE },
        { HTML_TT_TAG_PARAM_OPEN, HTML_TT_TAG_PARAM_CLOSE },
        { HTML_TT_TAG_PICTURE_OPEN, HTML_TT_TAG_PICTURE_CLOSE },
        { HTML_TT_TAG_PRE_OPEN, HTML_TT_TAG_PRE_CLOSE },
        { HTML_TT_TAG_PROGRESS_OPEN, HTML_TT_TAG_PROGRESS_CLOSE },
        { HTML_TT_TAG_Q_OPEN, HTML_TT_TAG_Q_CLOSE },
        { HTML_TT_TAG_RP_OPEN, HTML_TT_TAG_RP_CLOSE },
        { HTML_TT_TAG_RT_OPEN, HTML_TT_TAG_RT_CLOSE },
        { HTML_TT_TAG_RUBY_OPEN, HTML_TT_TAG_RUBY_CLOSE },
        { HTML_TT_TAG_S_OPEN, HTML_TT_TAG_S_CLOSE },
        { HTML_TT_TAG_SAMP_OPEN, HTML_TT_TAG_SAMP_CLOSE },
        { HTML_TT_TAG_SCRIPT_OPEN, HTML_TT_TAG_SCRIPT_CLOSE },
        { HTML_TT_TAG_SEARCH_OPEN, HTML_TT_TAG_SEARCH_CLOSE },
        { HTML_TT_TAG_SECTION_OPEN, HTML_TT_TAG_SECTION_CLOSE },
        { HTML_TT_TAG_SELECT_OPEN, HTML_TT_TAG_SELECT_CLOSE },
        { HTML_TT_TAG_SMALL_OPEN, HTML_TT_TAG_SMALL_CLOSE },
        { HTML_TT_TAG_SOURCE_OPEN, HTML_TT_TAG_SOURCE_CLOSE },
        { HTML_TT_TAG_SPAN_OPEN, HTML_TT_TAG_SPAN_CLOSE },
        { HTML_TT_TAG_STRIKE_OPEN, HTML_TT_TAG_STRIKE_CLOSE },
        { HTML_TT_TAG_STRONG_OPEN, HTML_TT_TAG_STRONG_CLOSE },
        { HTML_TT_TAG_STYLE_OPEN, HTML_TT_TAG_STYLE_CLOSE },
        { HTML_TT_TAG_SUB_OPEN, HTML_TT_TAG_SUB_CLOSE },
        { HTML_TT_TAG_SUMMARY_OPEN, HTML_TT_TAG_SUMMARY_CLOSE },
        { HTML_TT_TAG_SUP_OPEN, HTML_TT_TAG_SUP_CLOSE },
        { HTML_TT_TAG_SVG_OPEN, HTML_TT_TAG_SVG_CLOSE },
        { HTML_TT_TAG_TABLE_OPEN, HTML_TT_TAG_TABLE_CLOSE },
        { HTML_TT_TAG_TBODY_OPEN, HTML_TT_TAG_TBODY_CLOSE },
        { HTML_TT_TAG_TD_OPEN, HTML_TT_TAG_TD_CLOSE },
        { HTML_TT_TAG_TEMPLATE_OPEN, HTML_TT_TAG_TEMPLATE_CLOSE },
        { HTML_TT_TAG_TEXTAREA_OPEN, HTML_TT_TAG_TEXTAREA_CLOSE },
        { HTML_TT_TAG_TFOOT_OPEN, HTML_TT_TAG_TFOOT_CLOSE },
        { HTML_TT_TAG_TH_OPEN, HTML_TT_TAG_TH_CLOSE },
        { HTML_TT_TAG_THEAD_OPEN, HTML_TT_TAG_THEAD_CLOSE },
        { HTML_TT_TAG_TIME_OPEN, HTML_TT_TAG_TIME_CLOSE },
        { HTML_TT_TAG_TITLE_OPEN, HTML_TT_TAG_TITLE_CLOSE },
        { HTML_TT_TAG_TR_OPEN, HTML_TT_TAG_TR_CLOSE },
        { HTML_TT_TAG_TRACK_OPEN, HTML_TT_TAG_TRACK_CLOSE },
        { HTML_TT_TAG_TT_OPEN, HTML_TT_TAG_TT_CLOSE },
        { HTML_TT_TAG_U_OPEN, HTML_TT_TAG_U_CLOSE },
        { HTML_TT_TAG_UL_OPEN, HTML_TT_TAG_UL_CLOSE },
        { HTML_TT_TAG_VAR_OPEN, HTML_TT_TAG_VAR_CLOSE },
        { HTML_TT_TAG_VIDEO_OPEN, HTML_TT_TAG_VIDEO_CLOSE },
        { HTML_TT_TAG_WBR_OPEN, HTML_TT_TAG_WBR_CLOSE },
        { HTML_TT_TAG_COMMENT_OPEN, HTML_TT_TAG_COMMENT_CLOSE },
};

int main(void)
{
        html_elem_factory f;
        auto tt = 0;

        while ((tt = yylex()) && !is_err(tt)) {
                if (tt != HTML_TT_TAG_HTML_OPEN)
                        continue;

                try {
                        auto hp = f.html();

                        while ((tt = yylex()) != HTML_TT_TAG_OPEN_DONE)
                                ;

                        while ((tt = yylex()) == HTML_TT_TEXT)
                                hp.get()->append_child(f.text(*yytext));

                        html_elem_dump_visitor dump {};
                        dump.visit(*hp.get());
                        std::cout << "\n";
                } catch (const std::exception &e) {
                        std::cout << e.what() << std::endl;
                }

        }
}
